// generated by wsp, DO NOT EDIT.

package main

import "net/http"
import "time"
import "github.com/simplejia/push/controller/constraint"
import "github.com/simplejia/push/controller/project"
import "github.com/simplejia/push/controller/target"
import "github.com/simplejia/push/filter"

func init() {
	http.HandleFunc("/constraint/add", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(constraint.Constraint)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/constraint/add"}); !ok {
				return
			}
		}()
		c.Add(w, r)
	})

	http.HandleFunc("/constraint/get", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(constraint.Constraint)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/constraint/get"}); !ok {
				return
			}
		}()
		c.Get(w, r)
	})

	http.HandleFunc("/constraint/list", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(constraint.Constraint)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/constraint/list"}); !ok {
				return
			}
		}()
		c.List(w, r)
	})

	http.HandleFunc("/constraint/load_from_file", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(constraint.Constraint)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/constraint/load_from_file"}); !ok {
				return
			}
		}()
		c.LoadFromFile(w, r)
	})

	http.HandleFunc("/constraint/pause", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(constraint.Constraint)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/constraint/pause"}); !ok {
				return
			}
		}()
		c.Pause(w, r)
	})

	http.HandleFunc("/constraint/proceed", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(constraint.Constraint)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/constraint/proceed"}); !ok {
				return
			}
		}()
		c.Proceed(w, r)
	})

	http.HandleFunc("/constraint/start", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(constraint.Constraint)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/constraint/start"}); !ok {
				return
			}
		}()
		c.Start(w, r)
	})

	http.HandleFunc("/constraint/stop", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(constraint.Constraint)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/constraint/stop"}); !ok {
				return
			}
		}()
		c.Stop(w, r)
	})

	http.HandleFunc("/constraint/update", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(constraint.Constraint)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/constraint/update"}); !ok {
				return
			}
		}()
		c.Update(w, r)
	})

	http.HandleFunc("/project/add", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(project.Project)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/project/add"}); !ok {
				return
			}
		}()
		c.Add(w, r)
	})

	http.HandleFunc("/project/get", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(project.Project)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/project/get"}); !ok {
				return
			}
		}()
		c.Get(w, r)
	})

	http.HandleFunc("/project/list", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(project.Project)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/project/list"}); !ok {
				return
			}
		}()
		c.List(w, r)
	})

	http.HandleFunc("/project/pause", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(project.Project)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/project/pause"}); !ok {
				return
			}
		}()
		c.Pause(w, r)
	})

	http.HandleFunc("/project/proceed", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(project.Project)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/project/proceed"}); !ok {
				return
			}
		}()
		c.Proceed(w, r)
	})

	http.HandleFunc("/project/start", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(project.Project)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/project/start"}); !ok {
				return
			}
		}()
		c.Start(w, r)
	})

	http.HandleFunc("/project/stop", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(project.Project)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/project/stop"}); !ok {
				return
			}
		}()
		c.Stop(w, r)
	})

	http.HandleFunc("/project/update", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(project.Project)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/project/update"}); !ok {
				return
			}
		}()
		c.Update(w, r)
	})

	http.HandleFunc("/target/delete", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(target.Target)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/target/delete"}); !ok {
				return
			}
		}()
		c.Delete(w, r)
	})

	http.HandleFunc("/target/get", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(target.Target)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/target/get"}); !ok {
				return
			}
		}()
		c.Get(w, r)
	})

	http.HandleFunc("/target/list", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(target.Target)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/target/list"}); !ok {
				return
			}
		}()
		c.List(w, r)
	})

	http.HandleFunc("/target/list_by_cid", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(target.Target)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/target/list_by_cid"}); !ok {
				return
			}
		}()
		c.ListByCid(w, r)
	})

}